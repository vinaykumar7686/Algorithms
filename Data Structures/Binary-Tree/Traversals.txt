A Tree is typically traversed in two ways:

Breadth First Traversal (Or Level Order Traversal)
Depth First Traversals
Inorder Traversal (Left-Root-Right)
Preorder Traversal (Root-Left-Right)
Postorder Traversal (Left-Right-Root)

_________________________________________________________________________________
# PreOrder Traversal

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    
    def __init__(self):
        self.ans = []
        
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        
        if not root:
            return
        
        self.ans.append(root.val)
        
        if root.left:
            self.preorderTraversal(root.left)        
        
        if root.right:
            self.preorderTraversal(root.right)
            
        return self.ans
        

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []
        
        ans = []
        stack = [root]
        
        while stack:
            temp = stack.pop(0)
            
            ans.append(temp.val)
            
            if temp.right:
                stack = [temp.right]+stack
            if temp.left:
                stack = [temp.left]+stack
                
        return ans

_________________________________________________________________________________
# Inorder Traversal

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.ans = []
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        
        if not root:
            return
        
        if root.left:
            self.inorderTraversal(root.left)
            
        self.ans.append(root.val)
        
        if root.right:
            self.inorderTraversal(root.right)
            
        return self.ans


_________________________________________________________________________________
# Post Traversal

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    
    def __init__(self):
        self.ans = []
        
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        
        if not root:
            return
        
        if root.left:
            self.postorderTraversal(root.left)        
        
        if root.right:
            self.postorderTraversal(root.right)
            
        self.ans.append(root.val)
            
        return self.ans
